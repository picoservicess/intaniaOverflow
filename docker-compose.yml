version: "3.8"

services:
  postgres:
    image: postgres:latest
    container_name: postgres
    expose:
      - "5432"
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - intania-overflow-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U yourusername -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure:3

  rabbitmq:
    image: rabbitmq:4.0-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: on-failure:3
    networks:
      - intania-overflow-network

  asset-service:
    build:
      context: ./
      dockerfile: ./asset-service/Dockerfile
    expose:
      - "5001"
    environment:
      PORT: 5001
      JWT_SECRET: ${JWT_SECRET}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      AWS_S3_BUCKET_NAME: ${AWS_S3_BUCKET_NAME}
    networks:
      - intania-overflow-network
    deploy:
      mode: replicated
      replicas: 2
    restart: on-failure:3

  notification-service:
    build:
      context: ./
      dockerfile: ./notification-service/Dockerfile
    expose:
      - "5002"
    environment:
      RABBITMQ_URL: "amqp://rabbitmq:5672"
      RABBITMQ_QUEUE: "${NOTIFY_QUEUE}"
      PORT: 5002
      JWT_SECRET: ${JWT_SECRET}
      DATABASE_URL: ${NOTI_DATABASE_URL}
      THREAD_SERVICE_HOST: load-balancer
      THREAD_SERVICE_PORT: 5004
      USER_SERVICE_HOST: load-balancer
      USER_SERVICE_PORT: 5005
    depends_on:
      - rabbitmq
      - user-service
    networks:
      - intania-overflow-network
    deploy:
      mode: replicated
      replicas: 2
    restart: on-failure:3

  reply-service:
    build:
      context: ./
      dockerfile: ./reply-service/Dockerfile
    expose:
      - "5003"
    environment:
      PORT: 5003
      JWT_SECRET: ${JWT_SECRET}
      RABBITMQ_URL: "amqp://rabbitmq:5672"
      RABBITMQ_QUEUE: "${NOTIFY_QUEUE}"
    networks:
      - intania-overflow-network
    deploy:
      mode: replicated
      replicas: 2
    restart: on-failure:3

  thread-service:
    build:
      context: ./
      dockerfile: ./thread-service/Dockerfile
    expose:
      - "5004"
    environment:
      PORT: 5004
      RABBITMQ_URL: "amqp://rabbitmq:5672"
      RABBITMQ_QUEUE: "${NOTIFY_QUEUE}"
      JWT_SECRET: ${JWT_SECRET}
      DATABASE_URL: ${THREAD_DATABASE_URL}
    networks:
      - intania-overflow-network
    deploy:
      mode: replicated
      replicas: 2
    restart: on-failure:3

  user-service:
    build:
      context: ./
      dockerfile: ./user-service/Dockerfile
    expose:
      - "5005"
    environment:
      PORT: 5005
      DATABASE_URL: ${USER_DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      CU_AUTH_URL: ${CU_AUTH_URL}
      CU_APP_ID: ${CU_APP_ID}
      CU_APP_SECRET: ${CU_APP_SECRET}
    depends_on:
      - postgres
    networks:
      - intania-overflow-network
    deploy:
      mode: replicated
      replicas: 2
    restart: on-failure:3

  voting-service:
    build:
      context: ./
      dockerfile: ./voting-service/Dockerfile
    expose:
      - "5006"
    environment:
      PORT: 5006
      JWT_SECRET: ${JWT_SECRET}
    networks:
      - intania-overflow-network
    deploy:
      mode: replicated
      replicas: 2
    restart: on-failure:3

  logging-service:
    build:
      context: ./
      dockerfile: ./logging-service/Dockerfile
    container_name: logging-service
    expose:
      - "5007"
    ports:
      - "5007:5007"
    environment:
      PORT: 5007
      RABBITMQ_URL: "amqp://rabbitmq:5672"
      RABBITMQ_QUEUE: ${LOG_QUEUE}
      DATABASE_URL: "${LOG_DATABASE_URL}"
    depends_on:
      - rabbitmq
    networks:
      - intania-overflow-network
    restart: on-failure:3

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
      GF_POSTGRES_HOST: ${GF_POSTGRES_HOST}
      GF_POSTGRES_PORT: ${GF_POSTGRES_PORT}
      GF_POSTGRES_DB: ${GF_POSTGRES_DB}
      GF_POSTGRES_USER: ${GF_POSTGRES_USER}
      GF_POSTGRES_PASSWORD: ${GF_POSTGRES_PASSWORD}
    volumes:
      - ./grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - postgres
    networks:
      - intania-overflow-network
    restart: on-failure:3

  load-balancer:
    image: nginx:alpine
    container_name: load-balancer
    volumes:
      - ./load-balancer/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - asset-service
      - notification-service
      - reply-service
      - thread-service
      - user-service
      - voting-service
    ports:
      - "5001:5001"
      - "5002:5002"
      - "5003:5003"
      - "5004:5004"
      - "5005:5005"
      - "5006:5006"
    networks:
      - intania-overflow-network
    restart: on-failure:3

  api-gateway:
    build:
      context: ./
      dockerfile: ./api-gateway/Dockerfile
    container_name: api-gateway
    env_file:
      - ./api-gateway/.env
    expose:
      - "80"
    ports:
      - "80:80"
    environment:
      - API_GATEWAY_PORT=80
      - ASSET_SERVICE_HOST=load-balancer
      - ASSET_SERVICE_PORT=5001
      - NOTIFICATION_SERVICE_HOST=load-balancer
      - NOTIFICATION_SERVICE_PORT=5002
      - REPLY_SERVICE_HOST=load-balancer
      - REPLY_SERVICE_PORT=5003
      - THREAD_SERVICE_HOST=load-balancer
      - THREAD_SERVICE_PORT=5004
      - USER_SERVICE_HOST=load-balancer
      - USER_SERVICE_PORT=5005
      - VOTING_SERVICE_HOST=load-balancer
      - VOTING_SERVICE_PORT=5006
    depends_on:
      - asset-service
      - notification-service
      - reply-service
      - thread-service
      - user-service
      - voting-service
      - logging-service
    networks:
      - intania-overflow-network
    restart: on-failure:3

networks:
  intania-overflow-network:
    driver: bridge
